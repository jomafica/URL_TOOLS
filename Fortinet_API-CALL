import requests
import json
import re
from argparse import ArgumentParser, ArgumentTypeError
import concurrent.futures

requests.packages.urllib3.disable_warnings() 

"""
How to use:
    - Give a list of firewall ip's seperated by "new line"
    - in the "def cookie(fw):":
        - Give username
        - Give password
    The output will be a file with csv data(results_in_CSV.txt).
"""

class OutFile:

    txt = open("results_in_CSV.txt", "w+")        

    def writefile(self, cnts):
        self.txt.write(cnts)

    def closefile(self):
        self.txt.closed

def workers_head(func_to_call, arg, of):

    of.writefile("NTP_TYPE,NTP_SERVER,SN,TIMEZONE,HOSTNAME,SN,IP\n")

    with concurrent.futures.ThreadPoolExecutor() as executor:

        future = {executor.submit(func_to_call, ip.strip(), of):ip for ip in arg}

        for futuresult in concurrent.futures.as_completed(future): 

            try:

                if isinstance(futuresult.result(),list):

                    writef(futuresult.result(),of)

            except Exception as e:

                print(e)
                
    of.closefile()
        
def cookie(fw, of):

    us = "dpereira"             # change credencials 
    pss = "Jomafica01!"            # change credencials 

    try:

        re = requests.post("https://" + fw + "/logincheck?"+ "username=" + us + "&" + "secretkey=" + pss, verify = False, timeout=1)
        
        if re.status_code == 200:

            return content(fw, re.cookies)

    except requests.exceptions.Timeout:

        of.writefile("None,None,None,None,None,None," + fw + "\n")

    except Exception as e:

        of.writefile("None,None,None,None,None,None," + fw + "\n")
        print("cookies: ", e)

def content(fw, cks):

    ans_list = []
    
    ntp_uri = "/api/v2/cmdb/system/ntp"
    timezone_uri = "/api/v2/cmdb/system/global"

    re_ntp = requests.get("https://" + fw + ntp_uri, cookies=cks, verify = False)
    
    if re_ntp.status_code == 200:
        ans_list.append(re_ntp.json())

    re_tz = requests.get("https://" + fw + timezone_uri, cookies=cks, verify = False)
    
    if re_tz.status_code == 200:
        ans_list.append(re_tz.json())

    ans_list = ("None,None,None,None,None,None," + fw + "\n")

    logout(fw)

    return ans_list


def logout(fw):
    re = requests.post("https://" + fw + "/logout", verify = False)

def results(cont):

    csv_list = []
    for dct in cont:
        if isinstance (dct, dict):
            for k,v in dct.items():
                if k == "serial":
                    csv_list.append(v)
                if k == "results":
                    for key,value in v.items():
                        if key == "hostname":
                            csv_list.append(value)
                        if key == "type":
                            csv_list.append(value)
                        if key == "ntpserver":
                            if value:
                                for i in value:
                                    if isinstance(i,dict):
                                        for kk,vv in i.items():
                                            if kk == "server":
                                                csv_list.append(vv) 
                            else:
                                csv_list.append("none")
                        if key == "timezone":
                            csv_list.append(value)
    return csv_list

def writef(conts,ofile):

    vals = results(conts)

    for val in vals:

        ofile.writefile(val + ",")

    ofile.writefile("\n")

def valid_ext(ext):
    regex = re.search(r'\.txt', ext)
    if not regex:
        raise ArgumentTypeError('Must add the extension .txt')
    return ext

def args():
    args = ArgumentParser()
    args.add_argument('Firewall_list', help='Name the IP firewall list file plus the extension in txt', type=valid_ext)
    return args.parse_args()

def main(fwip):

    of = OutFile()

    workers_head(cookie, fwip, of)

if __name__ == '__main__':

    arguments = args()
    firewall_ips = open(arguments.Firewall_list, "r")

    main(firewall_ips)
