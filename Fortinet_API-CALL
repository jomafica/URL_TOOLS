import requests
import json
import re
from argparse import ArgumentParser, ArgumentTypeError
import concurrent.futures
import requests

requests.packages.urllib3.disable_warnings() 

"""
How to use:
    - Give a list of firewall ip's seperated by "new line"
    - in the "def cookie(fw):":
        - Give username
        - Give password
"""


class OutFile:

    txt = open("results_in_CSV.txt", "w+")        

    def writefile(self, cnts):
        self.txt.write(cnts)

    def closefile(self):
        self.txt.closed

def workers_head(func_to_call, arg, of):

    of.writefile("NTP_TYPE,NTP_SERVER,SN\n")

    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:

        future = {executor.submit(func_to_call, ip.strip(), of):ip for ip in arg}

        for futuresult in concurrent.futures.as_completed(future):
            try:
                if futuresult:
                    writef(futuresult.result(),of)

            except Exception as e:
                print(e)
    of.closefile()
        
def cookie(fw, of):

    us = "admin"             # change credencials 
    pss = "admin"            # change credencials 

    try:

        re = requests.post("https://" + fw + "/logincheck?"+ "username=" + us + "&" + "secretkey=" + pss, verify = False, timeout=1)
        
        if re.status_code == 200:

            return content(fw, re.cookies)

    except requests.exceptions.Timeout:

        of.writefile("None,None,None," + fw)

    except Exception as e:

        of.writefile("None,None,None," + fw)
        print(e)

def content(fw, cks):
    ntp_uri = "/api/v2/cmdb/system/ntp"
    re = requests.get("https://" + fw + ntp_uri, cookies=cks, verify = False)
    logout(fw)
    return re.json()  

def logout(fw):
    re = requests.post("https://" + fw + "/logout", verify = False)

def results(cont):
    json = []
    if isinstance (cont, dict):
        for k,v in cont.items():
            if k == "serial":
                json.append(v)
            if k == "results":
                for key,value in v.items():
                    if key == "type":
                        json.append(value)
                    if key == "ntpserver":
                        if value:
                            for i in value:
                                if isinstance(i,dict):
                                    for kk,vv in i.items():
                                        if kk == "server":
                                            json.append(vv) 
                        else:
                            json.append("none") 
    return json

def writef(conts,ofile):
    vals = results(conts)
    for val in vals:
        ofile.writefile(val + ",")
    ofile.writefile("\n")

def valid_ext(ext):
    regex = re.search(r'\.txt', ext)
    if not regex:
        raise ArgumentTypeError('Must add the extension .txt')
    return ext

def args():
    args = ArgumentParser()
    args.add_argument('Firewall_list', help='Name the IP firewall list file plus the extension in txt', type=valid_ext)
    return args.parse_args()

def main(fwip):

    of = OutFile()

    workers_head(cookie, fwip, of)


if __name__ == '__main__':

    arguments = args()
    firewall_ips = open(arguments.Firewall_list, "r")

    main(firewall_ips)


